{"version":3,"sources":["apps/WPMReader/constants.js","apps/WPMReader/WPMReader.js","shared/hooks/useInterval.js","App.js","reportWebVitals.js","index.js"],"names":["sizes","stickyProgress","position","bottom","opacity","WPMReader","toggleTheme","useState","speed","setSpeed","chunk","setChunk","textInput","setTextInput","finalText","setFinalText","isPlaying","setIsPlaying","fontSizeIdx","setFontSizeIdx","i","setI","wordLength","useRef","wordArr","useEffect","current","replace","split","length","callback","delay","savedCallback","id","setInterval","clearInterval","useInterval","sentence","text","index","words","splice","join","higlightWord","useEventListener","e","document","activeElement","tagName","keyCode","preventDefault","Main","Header","background","pad","Text","size","Button","label","primary","alignSelf","margin","onClick","Box","align","TextArea","value","onChange","event","target","direction","vertical","RangeInput","min","max","step","parseInt","plain","icon","Pause","Play","hoverIndicator","color","elevation","History","secondary","ReactHtmlParser","Footer","style","justify","Math","Meter","type","App","React","darkMode","setDarkMode","Grommet","full","theme","grommet","themeMode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8ccceb4b.chunk.js","sourcesContent":["export const dummyText = 'The quick brown fox jumped over the little lazy dog'\nexport const sizes = [\n  'xsmall',\n  'small',\n  'medium',\n  'large',\n  'xlarge',\n  'xxlarge',\n  '2xl',\n  '3xl',\n  '4xl',\n  '5xl',\n  '6xl',\n];","import './WPMReader.css';\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Play, Pause, History } from 'grommet-icons';\nimport { Main, Button, Box, Header, TextArea, RangeInput, Text, Meter, Footer, CheckBoxGroup } from 'grommet';\nimport ReactHtmlParser from 'react-html-parser';\nimport useInterval from '../../shared/hooks/useInterval'\nimport useEventListener from '@use-it/event-listener'\nimport { sizes, dummyText } from './constants'\n\nconst stickyProgress = {  position: 'sticky', bottom: '0px', opacity: '85%' };\n\nfunction WPMReader({ toggleTheme }) {\n  const [speed, setSpeed] = useState(200);\n  const [chunk, setChunk] = useState(1);\n  const [textInput, setTextInput] = useState(dummyText);\n  const [finalText, setFinalText] = useState('');\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [fontSizeIdx, setFontSizeIdx] = useState(3);\n  const [i, setI] = useState(0);\n  const wordLength = useRef(0);\n  const wordArr = useRef(0);\n\n  const onWPMSpeedChange = event => setSpeed(event.target.value);\n  const onChunkSizeChange = event => setChunk(parseInt(event.target.value));\n  const onTextInputChange = event => {\n    setTextInput(event.target.value);\n    setI(0);\n  }\n  const onFontSizeChange = event => setFontSizeIdx(parseInt(parseInt(event.target.value) - 1));\n\n\n  const higlightWord = (text, index) => {\n    var words = [...wordArr.current];\n    if (index >= words.length) {\n      return text;\n    }\n    words.splice(index, 0, \"<span class='highlight'>\");\n    words.splice(index + chunk + 1, 0, \"</span>\");\n    return words.join(' ');\n  };\n\n  useEffect(() => {\n    wordArr.current = textInput.replace(/(?:\\r\\n|\\r|\\n)/g, '<br>').split(\" \");\n    wordLength.current = wordArr.current.length;\n  }, [textInput]); // Only re-run the effect if count changes\n\n  useInterval(function () {\n    if (!isPlaying || i > textInput.length || textInput.length === 0)\n      return;\n    var sentence = higlightWord(textInput, i);\n\n    if (sentence !== textInput) {\n      setI(i + chunk);\n    }\n    setFinalText(sentence)\n  }, 60000 / speed * chunk);\n\n\n  const handleShortcuts = (e) => {\n    if (document.activeElement.tagName !== \"BODY\")\n      return\n\n    let keyCode = e.keyCode;\n    if (keyCode === 32) {  //space\n      setIsPlaying(!isPlaying);\n      e.preventDefault();\n    }\n    if (keyCode === 37) {  //left\n      if (speed > 1)\n        setSpeed(speed - 1);\n      e.preventDefault();\n    }\n    if (keyCode === 39) {   //right\n      setSpeed(speed + 1);\n      e.preventDefault();\n\n    }\n    if (keyCode === 38) {  //up\n      setChunk(chunk + 1)\n      e.preventDefault();\n\n    }\n    if (keyCode === 40) {   //down\n      if (chunk > 1)\n        setChunk(chunk - 1)\n      e.preventDefault();\n\n    }\n    if (keyCode === 82) {  //r\n      setI(0)\n    }\n    if (keyCode === 190) { //>\n      setFontSizeIdx((fontSizeIdx + 1) % sizes.length);\n      e.preventDefault();\n    }\n\n    if (keyCode === 188) { //<\n      if (fontSizeIdx === 0) {\n        setFontSizeIdx(sizes.length - 1);\n      }\n      else\n        setFontSizeIdx(fontSizeIdx - 1);\n      e.preventDefault();\n    }\n  }\n\n  useEventListener('keydown', handleShortcuts);\n\n  return (\n    <>\n     <Main>\n      <Header background=\"dark-1\" pad=\"small\">\n          <Text size=\"large\"> WPM Reader </Text>\n          <Button\n            label=\"Toggle Theme\"\n            primary\n            alignSelf=\"end\"\n            margin=\"small\"\n            size=\"small\"\n            onClick={toggleTheme}\n          />\n      </Header>\n\n      {/* settings box */}\n      <Box align=\"center\" pad=\"large\">\n        <TextArea value={textInput} onChange={onTextInputChange} />\n        <Box direction=\"row\" pad=\"small\" >\n          <Box pad=\"small\" align=\"start\" >\n            <Text margin={{ vertical: 'medium' }}>WPM: {speed}</Text>\n            <RangeInput\n              margin={{ vertical: 'medium' }}\n              min={1}\n              max={1000}\n              step={1}\n              value={speed} onChange={onWPMSpeedChange} />\n          </Box>\n          <Box pad=\"small\" align=\"start\">\n            <Text margin={{ vertical: 'medium' }}>Chunk: {chunk}</Text>\n\n            <RangeInput\n              margin={{ vertical: 'medium' }}\n              min={1}\n              max={10}\n              step={1}\n              value={chunk} onChange={onChunkSizeChange} />\n          </Box>\n          <Box pad=\"small\" align=\"start\">\n            <Text margin={{ vertical: 'medium' }}>FontSize: {fontSizeIdx}</Text>\n\n            <RangeInput\n              margin={{ vertical: 'medium' }}\n              min={1}\n              max={sizes.length}\n              step={1}\n              value={fontSizeIdx} onChange={onFontSizeChange} />\n          </Box>\n        </Box>\n\n        <Box direction=\"row\">\n          <Button\n            plain={false} icon={!isPlaying ? <Play /> : <Pause />} hoverIndicator={{\n              background: {\n                color: 'background-contrast',\n              },\n              elevation: 'medium',\n            }}\n            margin=\"medium\"\n            alignSelf=\"center\"\n            onClick={() => { setIsPlaying(!isPlaying) }}\n          />\n          <Button\n            plain={false} icon={<History />} hoverIndicator\n            secondary\n            margin=\"medium\"\n            alignSelf=\"center\"\n            onClick={() => {\n              setI(0);\n              setFinalText(textInput)\n            }}\n          />\n        </Box>\n      </Box>\n\n      {/* reader box */}\n      <Box pad=\"large\" >\n        {\n          <>\n            <Text size={sizes[fontSizeIdx]}>\n              {ReactHtmlParser(finalText)}\n            </Text>\n          </>\n        }\n      </Box>\n      </Main>\n      <Footer style={stickyProgress} background=\"light-4\" justify=\"center\" pad=\"small\">\n        <Text size=\"xsmall\" >{wordLength.current === 0 ? 0 : Math.min(100, parseInt(i * 100 / wordLength.current))} %</Text>\n        <Meter size=\"large\" type=\"bar\" value={Math.min(100, (i / wordLength.current) * 100)} />\n      </Footer>\n    </>\n  );\n}\n\nexport default WPMReader;","import { useEffect, useRef } from 'react';\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}","import React from \"react\";\nimport { Grommet } from \"grommet\";\nimport { grommet } from \"grommet\";\nimport WPMReader from \"./apps/WPMReader/WPMReader\";\nconst App = () => {\n  const [darkMode, setDarkMode] = React.useState(false);\n\n  const toggleTheme = () => {\n    setDarkMode(!darkMode);\n  }\n  return (\n    <Grommet full theme={grommet} themeMode={darkMode ? \"dark\" : \"light\"}>\n      <WPMReader toggleTheme={toggleTheme}/>\n    </Grommet>\n  );\n};\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}